# -*- coding: utf-8 -*-
"""Apple_Quality_ProjectKanini0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12EtUNh90lX_aHqAkD1m-t_wvTrUuSxRv

Importing Libararies
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""Load The Data"""

df = pd.read_csv("apple_quality.csv")

"""EDA"""

df

df.columns

df.describe()

df.info()

df.shape

df.isnull().sum()

df.head()

df.tail()

"""remove rows with missing values"""

df = df.dropna()

df.tail()

df.info()

"""Remove Unnecessary Columns From Dataset"""

df = df.drop("A_id", axis=1)

df.columns

df["Acidity"] = df["Acidity"].astype(float)

df.info()

colors = ['#d72631', '#077b8a']
sns.countplot(x='Quality', data=df, palette=colors)
plt.title('Number of quality')
plt.xlabel('Quality')
plt.ylabel('Count')
for index, value in enumerate(df['Quality'].value_counts()):
    plt.text(index, value, str(value), ha='center', va='bottom')

quality_count = df['Quality'].value_counts()
colors = ['#d72631', '#077b8a']
quality_count.plot.pie(autopct='%1.2f%%', labels=['good', 'bad'], colors=colors)
plt.title("Quality% ")

df1 = df["Size"]
sns.displot(df1, kde=True, color='skyblue')
plt.title('Distribution Plot')
plt.xlabel('Value')
plt.ylabel('Counts')

df2 = df["Weight"]
sns.displot(df2, kde=True, color='skyblue')
plt.title('Distribution Plot')
plt.xlabel('Value')
plt.ylabel('Counts')

df3 = df["Sweetness"]
sns.displot(df3, kde=True, color='skyblue')
plt.title('Distribution Plot')
plt.xlabel('Value')
plt.ylabel('Counts')

df4 = df["Crunchiness"]
sns.displot(df4, kde=True, color='skyblue')
plt.title('Distribution Plot')
plt.xlabel('Value')
plt.ylabel('Counts')

df5 = df["Juiciness"]
sns.displot(df5, kde=True, color='skyblue')
plt.title('Distribution Plot')
plt.xlabel('Value')
plt.ylabel('Counts')

df6 = df["Ripeness"]
sns.displot(df6, kde=True, color='skyblue')
plt.title('Distribution Plot')
plt.xlabel('Value')
plt.ylabel('Counts')

df7 = df["Acidity"]
sns.displot(df7, kde=True, color='skyblue')
plt.title('Distribution Plot')
plt.xlabel('Value')
plt.ylabel('Counts')

plt.figure(figsize=(10, 6))
sns.heatmap(df.isnull(), cmap='viridis', yticklabels=False, cbar=False)
plt.title("Missing Data Pattern")
plt.show()

"""Correlation"""

correnlatio = df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correnlatio, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

df.corr()

"""MinMax Scaling"""

from sklearn.preprocessing import MinMaxScaler

df.dtypes

df_float = df.select_dtypes(include=['float64',]).columns

df_float

scaler = MinMaxScaler()

df[df_float] = scaler.fit_transform(df[df_float])

df

"""Train-Test Split"""

from sklearn.model_selection import train_test_split

X = df.drop(columns=["Quality"], axis=1)
y = df["Quality"]

X

y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

print("Training set - Features:", X_train.shape, "Labels:", y_train.shape)
print("Testing set - Features:", X_test.shape, "Labels:", y_test.shape)

"""Model"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

model = RandomForestClassifier()
model.fit(X_train, y_train)

prediction = model.predict(X_test)
accuracy_score(y_test,prediction)

